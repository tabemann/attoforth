\ Copyright (c) 2018, Travis Bemann
\ All rights reserved.
\ 
\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions are met:
\ 
\ 1. Redistributions of source code must retain the above copyright notice,
\    this list of conditions and the following disclaimer.
\ 
\ 2. Redistributions in binary form must reproduce the above copyright notice,
\    this list of conditions and the following disclaimer in the documentation
\    and/or other materials provided with the distribution.
\ 
\ 3. Neither the name of the copyright holder nor the names of its
\    contributors may be used to endorse or promote products derived from
\    this software without specific prior written permission.
\ 
\ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
\ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
\ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
\ ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
\ LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
\ CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
\ SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
\ INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
\ CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
\ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
\ POSSIBILITY OF SUCH DAMAGE.

GET-ORDER GET-CURRENT BASE @

DECIMAL
FORTH-WORDLIST TASK-WORDLIST 2 SET-ORDER
TASK-WORDLIST SET-CURRENT

REQUIRE src/forth/cond.fs

BEGIN-STRUCTURE BCHAN-SIZE
  FIELD: BCHAN-LOCK
  FIELD: BCHAN-RECV-COND
  FIELD: BCHAN-SEND-COND
  FIELD: BCHAN-QUEUE
  FIELD: BCHAN-QUEUE-COUNT
  FIELD: BCHAN-QUEUE-SIZE
  FIELD: BCHAN-QUEUE-MAX-SIZE
  FIELD: BCHAN-ENQUEUE-INDEX
  FIELD: BCHAN-DEQUEUE-INDEX
END-STRUCTURE

8 CONSTANT BCHAN-QUEUE-DEFAULT-SIZE

: BCHAN-QUEUE-INIT-SIZE ( size -- size ) BCHAN-QUEUE-DEFAULT-SIZE MIN ;

: BCHAN. ( chan -- )
  CR ." BCHAN-LOCK: " DUP BCHAN-LOCK @ .
  CR ." BCHAN-RECV-COND: " DUP BCHAN-RECV-COND @ .
  CR ." BCHAN-SEND-COND: " DUP BCHAN-SEND-COND @ .
  CR ." BCHAN-QUEUE: " DUP BCHAN-QUEUE @ .
  CR ." BCHAN-QUEUE-COUNT: " DUP BCHAN-QUEUE-COUNT @ .
  CR ." BCHAN-QUEUE-SIZE: " DUP BCHAN-QUEUE-SIZE @ .
  CR ." BCHAN-QUEUE-MAX-SIZE: " BCHAN-QUEUE-MAX-SIZE @ .
  CR ." BCHAN-ENQUEUE-INDEX: " BCHAN-ENQUEUE-INDEX @ .
  CR ." BCHAN-DEQUEUE-INDEX: " BCHAN-DEQUEUE-INDEX @ . CR ;

: NEW-BCHAN ( queue-size -- chan )
  BCHAN-SIZE ALLOCATE!
  2DUP BCHAN-QUEUE-MAX-SIZE !
  SWAP BCHAN-QUEUE-INIT-SIZE SWAP 2DUP BCHAN-QUEUE-SIZE !
  0 OVER BCHAN-QUEUE-COUNT !
  0 OVER BCHAN-ENQUEUE-INDEX !
  0 OVER BCHAN-DEQUEUE-INDEX !
  SWAP CELLS ALLOCATE! OVER BCHAN-QUEUE !
  NEW-LOCK OVER BCHAN-LOCK !
  DUP BCHAN-LOCK @ NEW-COND OVER BCHAN-RECV-COND !
  DUP BCHAN-LOCK @ NEW-COND OVER BCHAN-SEND-COND ! ;

: DESTROY-BCHAN ( chan -- )
  DUP BCHAN-RECV-COND @  DESTROY-COND
  DUP BCHAN-SEND-COND @ DESTROY-COND
  DUP BCHAN-LOCK @ DESTROY-LOCK
  DUP BCHAN-QUEUE @ FREE!
  FREE! ;

: DEQUEUE-BCHAN ( chan -- x )
  DUP BCHAN-QUEUE @ OVER BCHAN-DEQUEUE-INDEX @ CELLS + @
  OVER BCHAN-QUEUE-COUNT @ 1- 2 PICK BCHAN-QUEUE-COUNT !
  OVER BCHAN-DEQUEUE-INDEX @ 1+ 2 PICK BCHAN-QUEUE-SIZE @ MOD
  ROT BCHAN-DEQUEUE-INDEX ! ;

: EXPAND-BCHAN ( chan -- )
  DUP BCHAN-QUEUE-SIZE @ 2 * OVER BCHAN-QUEUE-MAX-SIZE @ MIN
  DUP CELLS ALLOCATE!
  DUP 3 PICK BCHAN-QUEUE-COUNT @ 0 ?DO
    3 PICK BCHAN-QUEUE @ 4 PICK BCHAN-DEQUEUE-INDEX @ CELLS + @
    OVER ! CELL+
    3 PICK BCHAN-DEQUEUE-INDEX @ 1+ 4 PICK BCHAN-QUEUE-SIZE @ MOD
    4 PICK BCHAN-DEQUEUE-INDEX !
  LOOP
  DROP
  2 PICK BCHAN-QUEUE @ FREE!
  2 PICK BCHAN-QUEUE !
  OVER BCHAN-QUEUE-SIZE !
  0 OVER BCHAN-DEQUEUE-INDEX !
  DUP BCHAN-QUEUE-COUNT @ SWAP BCHAN-ENQUEUE-INDEX ! ;

: ENQUEUE-BCHAN ( x chan -- )
  DUP BCHAN-QUEUE-COUNT @ OVER BCHAN-QUEUE-SIZE @ >= IF DUP EXPAND-BCHAN THEN
  TUCK BCHAN-QUEUE @ 2 PICK BCHAN-ENQUEUE-INDEX @ CELLS + !
  DUP BCHAN-QUEUE-COUNT @ 1+ 2 PICK BCHAN-QUEUE-COUNT !
  DUP BCHAN-ENQUEUE-INDEX @ 1+ OVER BCHAN-QUEUE-SIZE @ MOD
  SWAP BCHAN-ENQUEUE-INDEX ! ;

\ : DEQUEUE-BCHAN ( chan -- x )
\   DUP BCHAN-QUEUE @ @
\   OVER BCHAN-QUEUE-COUNT @ 1- 2 PICK BCHAN-QUEUE-COUNT !
\   OVER BCHAN-QUEUE @ CELL+ 2 PICK BCHAN-QUEUE @
\   3 ROLL BCHAN-QUEUE-COUNT @ CELLS MOVE ;
\ 
\ : ENQUEUE-BCHAN ( x chan -- )
\   DUP BCHAN-QUEUE-COUNT @ OVER BCHAN-QUEUE-SIZE @ >= IF
\     DUP BCHAN-QUEUE-SIZE @ 2 * OVER BCHAN-QUEUE-MAX-SIZE @ MIN
\     OVER BCHAN-QUEUE @ OVER CELLS RESIZE DROP 2 PICK BCHAN-QUEUE !
\     OVER BCHAN-QUEUE-SIZE !
\   THEN
\   SWAP OVER BCHAN-QUEUE @ 2 PICK BCHAN-QUEUE-COUNT @ CELLS + !
\   1 SWAP BCHAN-QUEUE-COUNT +! ;

: SEND-BCHAN ( x chan -- )
  DUP BCHAN-LOCK @ LOCK
  BEGIN DUP BCHAN-QUEUE-COUNT @ OVER BCHAN-QUEUE-MAX-SIZE @ >= WHILE
    DUP BCHAN-SEND-COND @ WAIT-COND
  REPEAT
  SWAP OVER ENQUEUE-BCHAN
  DUP BCHAN-RECV-COND @ SIGNAL-COND
  BCHAN-LOCK @ UNLOCK-NO-RELOCK ;

: TRY-SEND-BCHAN ( x chan -- success )
  DUP BCHAN-LOCK @ LOCK
  DUP BCHAN-QUEUE-COUNT @ OVER BCHAN-QUEUE-MAX-SIZE @ < IF
    TUCK ENQUEUE-BCHAN
    DUP BCHAN-RECV-COND @ SIGNAL-COND
    TRUE
  ELSE
    NIP FALSE
  THEN
  SWAP BCHAN-LOCK @ UNLOCK-NO-RELOCK ;

: RECV-BCHAN ( chan -- x )
  DUP BCHAN-LOCK @ LOCK
  BEGIN DUP BCHAN-QUEUE-COUNT @ 0= WHILE
    DUP BCHAN-RECV-COND @ WAIT-COND
  REPEAT
  DUP DEQUEUE-BCHAN
  OVER BCHAN-SEND-COND @ SIGNAL-COND
  SWAP BCHAN-LOCK @ UNLOCK-NO-RELOCK ;

: PEEK-BCHAN ( chan -- x )
  DUP BCHAN-LOCK @ LOCK
  BEGIN DUP BCHAN-QUEUE-COUNT @ 0= WHILE
    DUP BCHAN-RECV-COND @ WAIT-COND
  REPEAT
  DUP BCHAN-QUEUE @ @
  SWAP BCHAN-LOCK @ UNLOCK-NO-RELOCK ;

: TRY-RECV-BCHAN ( chan -- x found )
  DUP BCHAN-LOCK @ LOCK
  DUP BCHAN-QUEUE-COUNT @ 0<> IF
    DUP DEQUEUE-BCHAN
    OVER BCHAN-SEND-COND @ SIGNAL-COND
    SWAP BCHAN-LOCK @ UNLOCK-NO-RELOCK
    TRUE
  ELSE
    BCHAN-LOCK @ UNLOCK-NO-RELOCK
    0 FALSE
  THEN ;

: TRY-PEEK-BCHAN ( chan -- x found )
  DUP BCHAN-LOCK @ LOCK
  DUP BCHAN-QUEUE-COUNT @ 0<> IF
    DUP BCHAN-QUEUE @ @
    SWAP BCHAN-LOCK @ UNLOCK-NO-RELOCK
    TRUE
  ELSE
    BCHAN-LOCK @ UNLOCK-NO-RELOCK
    0 FALSE
  THEN ;

: COUNT-BCHAN ( chan -- u ) BCHAN-QUEUE-COUNT @ ;

BASE ! SET-CURRENT SET-ORDER