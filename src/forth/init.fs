FORTH-WORDLIST IO-WORDLIST TASK-WORDLIST 3 SET-ORDER

IO-WORDLIST SET-CURRENT

9 CELLS CONSTANT TERMINAL-INFO-SIZE
0 CELLS OFFSET TERMINAL-FD
1 CELLS OFFSET TERMINAL-BUFFER-SIZE
2 CELLS OFFSET TERMINAL-INSERT-OFFSET
3 CELLS OFFSET TERMINAL-ROW
4 CELLS OFFSET TERMINAL-COLUMN
5 CELLS OFFSET TERMINAL-WIDTH
6 CELLS OFFSET TERMINAL-HEIGHT
7 CELLS OFFSET TERMINAL-INIT-ROW
8 CELLS OFFSET TERMINAL-INIT-COLUMN

$1B CONSTANT ESCAPE
$7F CONSTANT DELETE

DEFER HANDLE-CHAR

: EXPAND-TERMINAL-BUFFER ( source -- )
  DUP INPUT-ARG @ TERMINAL-BUFFER-SIZE @ DUP 2 * DUP ALLOCATE!
  SWAP 3 PICK INPUT-ARG @ TERMINAL-BUFFER-SIZE !
  2 PICK INPUT-BUFFER @ DUP 2 PICK 4 ROLL MOVE FREE!
  SWAP INPUT-BUFFER ! ;

: TRY-EXPAND-TERMINAL-BUFFER ( source -- )
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-BUFFER-SIZE @ = IF
    EXPAND-TERMINAL-BUFFER
  ELSE DROP THEN ;

: READ-CHAR ( source -- c-addr flag )
  HERE DUP 1 3 ROLL INPUT-ARG @ TERMINAL-FD @ IO-READ-BLOCK
  DUP IO-ACTION-GET-STATE DUP IO-STATE-GET-INDEX 1 = SWAP
  IO-STATE-DESTROY SWAP IO-ACTION-DESTROY ;

: ENABLE-WRAP ESCAPE EMIT [CHAR] [ EMIT [CHAR] 7 EMIT [CHAR] h EMIT ;

: READ-CHARS ( c-addr u1 c source -- c-addr u2 flag )
  3 PICK 0
  BEGIN
    DUP 5 PICK < IF
      2 PICK READ-CHAR IF
        C@ DUP 5 PICK = IF
          DROP 4 ROLL 4 ROLL 2DROP ROT ROT 2DROP TRUE TRUE
        ELSE
          DUP [CHAR] 0 >= OVER [CHAR] 9 <= AND IF
            ROT DUP ROT SWAP C! 1+ SWAP 1+ FALSE
          ELSE
            DROP 2DROP 2DROP 2DROP 0 0 FALSE TRUE
          THEN
        THEN
      ELSE
        DROP 2DROP 2DROP 2DROP 0 0 FALSE TRUE
      THEN
    ELSE
      2DROP 2DROP 2DROP 0 0 FALSE TRUE
    THEN
  UNTIL ;

: WAIT-CHAR ( source c -- flag )
  BEGIN
    OVER READ-CHAR IF
      C@ OVER = IF
        2DROP TRUE TRUE
      ELSE
        FALSE
      THEN
    ELSE
      DROP 2DROP FALSE TRUE
    THEN
  UNTIL ;

: QUERY-CURSOR-POSITION ( source -- row column flag )
  BEGIN
    ESCAPE EMIT [CHAR] [ EMIT [CHAR] 6 EMIT [CHAR] n EMIT
    DUP ESCAPE WAIT-CHAR IF
      DUP [CHAR] [ WAIT-CHAR IF
        HERE 1+ 10 [CHAR] ; 3 PICK READ-CHARS IF
          ['] PARSE-NUMBER 10 BASE-EXECUTE IF
            1- HERE 1+ 10 [CHAR] R 4 ROLL READ-CHARS IF
              ['] PARSE-NUMBER 10 BASE-EXECUTE IF
                1- TRUE TRUE
              ELSE
                DROP FALSE
              THEN
            ELSE
              2DROP FALSE
            THEN
          ELSE
            DROP FALSE
          THEN
        ELSE
          2DROP FALSE
        THEN
      ELSE
        2DROP 0 0 FALSE TRUE
      THEN
    ELSE
      2DROP 0 0 FALSE TRUE
    THEN
  UNTIL ;

: REGISTER-FORWARD ( source u -- )
  0 ?DO
    DUP INPUT-ARG @ TERMINAL-COLUMN @ 1+
    DUP 2 PICK INPUT-ARG @ TERMINAL-WIDTH @ >= IF
      DROP 0
      OVER INPUT-ARG @ TERMINAL-ROW @ 1+
      2 PICK INPUT-ARG @ TERMINAL-HEIGHT @ >= IF
        OVER INPUT-ARG @ TERMINAL-HEIGHT @ 1-
        ESCAPE EMIT [CHAR] D EMIT
        ESCAPE EMIT [CHAR] [ EMIT 9999 10 BASE. [CHAR] ; EMIT
        0 10 BASE. [CHAR] f EMIT
        2 PICK INPUT-ARG @ TERMINAL-INIT-ROW @ 1- DUP 0>= IF
          3 PICK INPUT-ARG @ TERMINAL-INIT-ROW !
        ELSE
          DROP 0 3 PICK INPUT-ARG @ TERMINAL-INIT-ROW !
          0 3 PICK INPUT-ARG @ TERMINAL-INIT-COLUMN !
        THEN
      ELSE
        OVER INPUT-ARG @ TERMINAL-ROW @ 1+
      THEN
      2 PICK INPUT-ARG @ TERMINAL-ROW !
    THEN
    OVER INPUT-ARG @ TERMINAL-COLUMN !
  LOOP
  DROP ;

: GO-FORWARD ( source u -- )
  0 ?DO
    DUP INPUT-ARG @ TERMINAL-COLUMN @ 1+
    DUP 2 PICK INPUT-ARG @ TERMINAL-WIDTH @ >= IF
      DROP 0
      OVER INPUT-ARG @ TERMINAL-ROW @ 1+
      DUP 3 PICK INPUT-ARG @ TERMINAL-HEIGHT @ >= IF
        DROP OVER INPUT-ARG @ TERMINAL-HEIGHT @ 1-
        OVER INPUT-ARG @ TERMINAL-INIT-ROW @ 1- DUP 0>= IF
          2 PICK INPUT-ARG @ TERMINAL-INIT-ROW !
        ELSE
          DROP 0 2 PICK INPUT-ARG @ TERMINAL-INIT-ROW !
          0 2 PICK INPUT-ARG @ TERMINAL-INIT-COLUMN !
        THEN
      THEN
      ESCAPE EMIT [CHAR] [ EMIT DUP 1+ 10 BASE. [CHAR] ; EMIT
      0 10 BASE. [CHAR] f EMIT
      2 PICK INPUT-ARG @ TERMINAL-ROW !
    ELSE
      ESCAPE EMIT [CHAR] [ EMIT [CHAR] C EMIT
    THEN
    OVER INPUT-ARG @ TERMINAL-COLUMN !
  LOOP
  DROP ;

: GO-BACKWARD ( source u -- )
  0 ?DO
    DUP INPUT-ARG @ TERMINAL-COLUMN @ 1- DUP 0>= IF
      OVER INPUT-ARG @ TERMINAL-COLUMN !
      ESCAPE EMIT [CHAR] [ EMIT [CHAR] D EMIT
    ELSE
      DROP DUP INPUT-ARG @ TERMINAL-ROW @ 1- DUP 0>= IF
        ESCAPE EMIT [CHAR] [ EMIT 1+ 10 BASE. [CHAR] ; EMIT
        9999 10 BASE. [CHAR] f EMIT
        DUP INPUT-ARG @ TERMINAL-ROW @ 1- OVER INPUT-ARG @ TERMINAL-ROW !
      ELSE
        DROP ESCAPE EMIT [CHAR] [ EMIT 1 10 BASE. [CHAR] ; EMIT
        9999 10 BASE. [CHAR] f EMIT
        0 OVER INPUT-ARG @ TERMINAL-INIT-ROW !
        0 OVER INPUT-ARG @ TERMINAL-INIT-COLUMN !
      THEN
      DUP INPUT-ARG @ TERMINAL-WIDTH @ 1- OVER INPUT-ARG @ TERMINAL-COLUMN !
    THEN
  LOOP
  DROP ;

: HANDLE-NEWLINE ( source -- )
  DUP DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - GO-FORWARD
  SPACE DUP TRY-EXPAND-TERMINAL-BUFFER
  DUP INPUT-BUFFER @ OVER INPUT-COUNT @ + NEWLINE SWAP C!
  DUP INPUT-COUNT @ 1+ SWAP INPUT-COUNT ! ;

: PRINT-REST-INPUT ( source -- )
  DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ OVER INPUT-BUFFER @ +
  OVER INPUT-COUNT @ 2 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - DUP 0> IF
    DUP ROT SWAP TYPE REGISTER-FORWARD
  ELSE
    2DROP DROP
  THEN ;

: PRINT-DELETE ( source -- )
  DUP 1 GO-BACKWARD DUP PRINT-REST-INPUT SPACE DUP 1 REGISTER-FORWARD
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - 1+
  GO-BACKWARD ;

: PRINT-DELETE-FORWARD ( source -- )
  DUP PRINT-REST-INPUT SPACE DUP 1 REGISTER-FORWARD
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - 1+
  GO-BACKWARD ;

: PRINT-NORMAL-CHAR ( source c -- )
  EMIT DUP 1 REGISTER-FORWARD DUP PRINT-REST-INPUT
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ -
  GO-BACKWARD ;

: HANDLE-DELETE ( source -- )
  DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 0> IF
    DUP PRINT-DELETE
    DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ OVER INPUT-BUFFER @ + DUP 1-
    2 PICK INPUT-COUNT @ 3 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - MOVE
    DUP INPUT-COUNT @ 1- OVER INPUT-COUNT !
    DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 1-
    SWAP INPUT-ARG @ TERMINAL-INSERT-OFFSET !
  ELSE DROP THEN ;

: HANDLE-DELETE-FORWARD ( source -- )
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ > IF
    DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ OVER INPUT-BUFFER @ + 1+ DUP 1-
    2 PICK INPUT-COUNT @ 3 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - 1- MOVE
    DUP INPUT-COUNT @ 1- OVER INPUT-COUNT ! PRINT-DELETE-FORWARD
  ELSE DROP THEN ;

: HANDLE-FORWARD ( source -- )
  DUP INPUT-COUNT @ OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET @ > IF
    DUP 1 GO-FORWARD DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 1+
    SWAP INPUT-ARG @ TERMINAL-INSERT-OFFSET !
  ELSE
    DROP
  THEN ;

: HANDLE-BACKWARD ( source -- )
  DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 0> IF
    DUP 1 GO-BACKWARD DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 1-
    SWAP INPUT-ARG @ TERMINAL-INSERT-OFFSET !
  ELSE
    DROP
  THEN ;

: HANDLE-SPECIAL ( source -- continue )
  DUP READ-CHAR IF
    C@ DUP [CHAR] [ = IF
      DROP DUP READ-CHAR IF
        C@ DUP [CHAR] C = IF
          DROP HANDLE-FORWARD TRUE
        ELSE DUP [CHAR] D = IF
          DROP HANDLE-BACKWARD TRUE
        ELSE [CHAR] 3 = IF
          DUP READ-CHAR IF
            C@ [CHAR] ~ = IF
              HANDLE-DELETE-FORWARD TRUE
            ELSE
              DROP TRUE
            THEN
          ELSE
            TRUE SWAP INPUT-IS-CLOSED ! FALSE
          THEN
        ELSE
          DROP TRUE
        THEN THEN THEN
      ELSE
        DROP TRUE SWAP INPUT-IS-CLOSED ! FALSE
      THEN
    ELSE
      HANDLE-CHAR
    THEN
  ELSE
    DROP TRUE SWAP INPUT-IS-CLOSED ! FALSE
  THEN ;

: HANDLE-NORMAL-CHAR ( source c -- )
  2DUP PRINT-NORMAL-CHAR OVER TRY-EXPAND-TERMINAL-BUFFER
  OVER INPUT-BUFFER @ 2 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ + DUP 1+
  3 PICK INPUT-COUNT @ 4 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ - MOVE
  OVER INPUT-BUFFER @ 2 PICK INPUT-ARG @ TERMINAL-INSERT-OFFSET @ + C!
  DUP INPUT-COUNT @ 1+ OVER INPUT-COUNT !
  DUP INPUT-ARG @ TERMINAL-INSERT-OFFSET @ 1+
  SWAP INPUT-ARG @ TERMINAL-INSERT-OFFSET ! ;

:NONAME ( source c -- continue )
  DUP NEWLINE = IF
    DROP HANDLE-NEWLINE FALSE
  ELSE DUP DELETE = IF
    DROP HANDLE-DELETE TRUE
  ELSE DUP ESCAPE = IF
    DROP HANDLE-SPECIAL
  ELSE
    HANDLE-NORMAL-CHAR TRUE
  THEN THEN THEN ; ' HANDLE-CHAR DEFER!

: READ-TERMINAL-CHAR ( source -- continue )
  DUP READ-CHAR IF
    C@ HANDLE-CHAR
  ELSE
    DROP TRUE SWAP INPUT-IS-CLOSED ! FALSE
  THEN ;

: REFILL-TERMINAL ( source -- flag )
  ESCAPE EMIT [CHAR] [ EMIT [CHAR] s EMIT
  DUP QUERY-CURSOR-POSITION IF
    DUP 3 PICK INPUT-ARG @ TERMINAL-COLUMN !
    2 PICK INPUT-ARG @ TERMINAL-INIT-COLUMN !
    DUP 2 PICK INPUT-ARG @ TERMINAL-ROW !
    OVER INPUT-ARG @ TERMINAL-INIT-ROW !
  ELSE
    2DROP 0 OVER INPUT-ARG @ TERMINAL-COLUMN !
    0 OVER INPUT-ARG @ TERMINAL-INIT-COLUMN !
    0 OVER INPUT-ARG @ TERMINAL-ROW !
    0 OVER INPUT-ARG @ TERMINAL-INIT-ROW !
  THEN
  ESCAPE EMIT [CHAR] [ EMIT 9999 10 BASE.
  [CHAR] ; EMIT 9999 10 BASE. [CHAR] f EMIT
  DUP QUERY-CURSOR-POSITION IF
    1+ 2 PICK INPUT-ARG @ TERMINAL-WIDTH !
    1+ OVER INPUT-ARG @ TERMINAL-HEIGHT !
  ELSE
    2DROP 80 OVER INPUT-ARG @ TERMINAL-WIDTH !
    24 OVER INPUT-ARG @ TERMINAL-HEIGHT !
  THEN
  ESCAPE EMIT [CHAR] [ EMIT [CHAR] u EMIT
  0 OVER INPUT-COUNT ! 0 OVER INPUT-INDEX !
  0 OVER INPUT-ARG @ TERMINAL-INSERT-OFFSET !
  BEGIN DUP READ-TERMINAL-CHAR INVERT UNTIL DROP TRUE ;

256 CONSTANT DEFAULT-TERMINAL-BUFFER-SIZE

: TERMINAL>SOURCE-CLEANUP ( source -- )
  DUP INPUT-BUFFER @ FREE! DUP INPUT-ARG @ FREE! FREE! ;

: TERMINAL>SOURCE ( fd -- input )
  ENABLE-WRAP
  INPUT-SIZE ALLOCATE! TERMINAL-INFO-SIZE ALLOCATE!
  DEFAULT-TERMINAL-BUFFER-SIZE OVER TERMINAL-BUFFER-SIZE !
  0 OVER TERMINAL-INSERT-OFFSET !
  ROT OVER TERMINAL-FD ! OVER INPUT-ARG !
  DEFAULT-TERMINAL-BUFFER-SIZE ALLOCATE! OVER INPUT-BUFFER !
  0 OVER INPUT-INDEX ! 0 OVER INPUT-COUNT !
  FALSE OVER INPUT-IS-CLOSED !
  ['] TERMINAL>SOURCE-CLEANUP OVER INPUT-CLEANUP !
  ['] REFILL-TERMINAL OVER INPUT-REFILL !
  0 OVER INPUT-SOURCE-ID ! 0 OVER INPUT-NEXT-INPUT ! ;

FORTH-WORDLIST SET-CURRENT

: ACCEPT ( c-addr u1 -- u2 )
  IO-STDIN TERMINAL>SOURCE DUP REFILL-TERMINAL DROP
  DUP INPUT-COUNT @ ROT MIN OVER INPUT-BUFFER @ ( a s u2 b )
  OVER 0> IF
    2DUP + 1- C@ NEWLINE = IF
      SWAP 1- SWAP
    THEN
  THEN
  3 ROLL 2 PICK MOVE SWAP DUP INPUT-CLEANUP @ EXECUTE ;

:NONAME
  IO-STDIN TERMINAL>SOURCE THIS-TASK CLEANUP-INPUT THIS-TASK >CONSOLE-INPUT
  FORTH-WORDLIST DUP 1 SET-ORDER SET-CURRENT ABORT ; EXECUTE